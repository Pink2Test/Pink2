---
version: 2
jobs:
  build:
    working_directory: /Pink2
    docker:
      - image: ubuntu:trusty
        environment:
          FROM_BUILD: "JRedinger"
    steps:
      - checkout
      - run:
          name: Install Build Depends
          command: |
                  export PATH=/usr/bin:$PATH
                  echo APT::Install-Recommends "0"; >> /etc/apt/apt.conf && \
                  echo APT::Install-Suggests "0"; >> /etc/apt/apt.conf && \
                  apt-get update && apt-get install \
                  --no-install-recommends \
                  -y \
                  wget ca-certificates p7zip-full autoconf automake bash bzip2 cmake gettext git libtool make g++-mingw-w64-x86-64
      - run:
          name: Build BOOST
          command: |
                 export PATH=/usr/bin:$PATH
                 cd src
                 wget https://sourceforge.net/projects/boost/files/boost/1.57.0/boost_1_57_0.tar.gz
                 echo 'fea9c7472f7a52cec2a1640958145b2144bf17903a21db65b95efb6ae5817fa5  boost_1_57_0.tar.gz' | sha256sum -c
                 tar xvzf boost_1_57_0.tar.gz
                 cd boost_1_57_0
                 echo "using gcc : : x86_64-w64-mingw32-g++ : <cxxflags>\"-std=c++11 -fvisibility=hidden     -I/usr/x86_64-w64-mingw32/include    \"  <linkflags>\"-L/usr/x86_64-w64-mingw32/lib    \" <archiver>\"x86_64-w64-mingw32-ar\" <striper>\"x86_64-w64-mingw32-strip\"  <ranlib>\"x86_64-w64-mingw32-ranlib\" <rc>\"\" : ;" > user-config.jam
                 ./bootstrap.sh --without-icu --with-libraries=chrono,filesystem,program_options,system,thread,test
                 ./b2 -d2 -j2 -d1 --prefix=/usr/x86_64-w64-mingw32 variant=release --layout=tagged --build-type=complete --user-config=user-config.jam threading=multi link=static -sNO_BZIP2=1 -sNO_ZLIB=1 binary-format=pe target-os=windows threadapi=win32 runtime-link=static address-model=64 stage
                 ./b2 -d0 -j4 --prefix=/usr/x86_64-w64-mingw32 variant=release --layout=tagged --build-type=complete --user-config=user-config.jam threading=multi link=static -sNO_BZIP2=1 -sNO_ZLIB=1 binary-format=pe target-os=windows threadapi=win32 runtime-link=static address-model=64 install
      - run:
          name: Build ZLib
          command: |
                 export PATH=/usr/bin:$PATH
                 cd src
                 wget http://www.zlib.net/zlib-1.2.11.tar.gz
                 echo 'c3e5e9fdd5004dcb542feda5ee4f0ff0744628baf8ed2dd5d66f8ca1197cb1a1 zlib-1.2.11.tar.gz' | sha256sum -c
                 tar xvzf zlib-1.2.11.tar.gz
                 cd zlib-1.2.11
                 ./configure --static --prefix=/usr/x86_64-w64-mingw32 
                 make CC=x86_64-w64-mingw32-gcc AR=x86_64-w64-mingw32-ar CFLAGS="-DSTATICLIB -I/usr/x86_64-w64-mingw32/include" LDFLAGS="-L/usr/x86_64-w64-mingw32/lib" libz.a
                 make install CC=x86_64-w64-mingw32-gcc AR=x86_64-w64-mingw32-ar CFLAGS="-DSTATICLIB -I/usr/x86_64-w64-mingw32/include" LDFLAGS="-L/usr/x86_64-w64-mingw32/lib" 
      - run:
          name: Build LibPNG
          command: |
                 export PATH=/usr/bin:$PATH          
                 cd src
                 wget http://download.sourceforge.net/libpng/libpng-1.6.16.tar.gz
                 echo '02f96b6bad5a381d36d7ba7a5d9be3b06f7fe6c274da00707509c23592a073ad  libpng-1.6.16.tar.gz' | sha256sum -c
                 tar xzvf libpng-1.6.16.tar.gz
                 cd libpng-1.6.16
                 CC=x86_64-w64-mingw32-gcc AR=x86_64-w64-mingw32-ar CFLAGS="-DSTATICLIB -I/usr/x86_64-w64-mingw32/include" LDFLAGS="-L/usr/x86_64-w64-mingw32/lib" ./configure --host=x86_64-w64-mingw32 --prefix=/usr/x86_64-w64-mingw32 --disable-shared
                 make && make install 
      - run:
          name: Build QREncode
          command: |
                 export PATH=/usr/bin:$PATH          
                 cd src 
                 wget https://fukuchi.org/works/qrencode/qrencode-3.4.4.tar.gz
                 echo 'e794e26a96019013c0e3665cb06b18992668f352c5553d0a553f5d144f7f2a72 qrencode-3.4.4.tar.gz' | sha256sum -c
                 tar xzvf qrencode-3.4.4.tar.gz
                 cd qrencode-3.4.4
                 CC=x86_64-w64-mingw32-gcc \
                 AR=x86_64-w64-mingw32-ar \
                 CFLAGS="-DSTATICLIB -I/usr/x86_64-w64-mingw32/include" \
                 LDFLAGS="-L/usr/x86_64-w64-mingw32/lib" \
                 png_CFLAGS="-I/usr/x86_64-w64-mingw32/include" \
                 png_LIBS="-I/usr/x86_64-w64-mingw32/lib" \
                 ./configure --host=x86_64-w64-mingw32 --prefix=/usr/x86_64-w64-mingw32 --disable-shared --enable-static --without-tools
                 make -j4 install
      - run:
          name: Build MiniUPNPC
          command: |
                 export PATH=/usr/bin:$PATH          
                 cd src 
                 wget http://miniupnp.free.fr/files/download.php?file=miniupnpc-1.9.tar.gz -O miniupnpc-1.9.tar.gz 
                 echo '2923e453e880bb949e3d4da9f83dd3cb6f08946d35de0b864d0339cf70934464 miniupnpc-1.9.tar.gz' | sha256sum -c
                 tar xzvf miniupnpc-1.9.tar.gz
                 cd miniupnpc-1.9
                 CC=x86_64-w64-mingw32-gcc \
                 AR=x86_64-w64-mingw32-ar \
                 CFLAGS="-DSTATICLIB -I/usr/x86_64-w64-mingw32/include" \
                 LDFLAGS="-L/usr/x86_64-w64-mingw32/lib" \
                 make libminiupnpc.a
                 mkdir /usr/x86_64-w64-mingw32/include/miniupnpc
                 cp *.h /usr/x86_64-w64-mingw32/include/miniupnpc
                 cp libminiupnpc.a /usr/x86_64-w64-mingw32/lib
      - run:
          name: Build BDB4.8
          command: |
                 export PATH=/usr/bin:$PATH          
                 cd src 
                 wget 'http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz'
                 echo '12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b85732798364ef db-4.8.30.NC.tar.gz' | sha256sum -c
                 tar -xzvf db-4.8.30.NC.tar.gz
                 cd db-4.8.30.NC/build_unix/
                 CC=/usr/bin/x86_64-w64-mingw32-gcc CXX=/usr/bin/x86_64-w64-mingw32-g++ ../dist/configure --host=x86_64-w64-mingw32 --enable-cxx \
                 --enable-mingw --disable-replication --disable-shared --prefix=/usr/x86_64-w64-mingw32 
                 make -j4
                 make install
      - run:
          name: Build OpenSSL
          command: |
                 export PATH=/usr/bin:$PATH          
                 cd src
                 wget 'http://www.openssl.org/source/openssl-1.0.2n.tar.gz'
                 echo '370babb75f278c39e0c50e8c4e7493bc0f18db6867478341a832a982fd15a8fe openssl-1.0.2n.tar.gz' | sha256sum -c
                 tar xvfz openssl-1.0.2n.tar.gz
                 cd openssl-1.0.2n
                 CFLAGS="-DSTATICLIB -I/usr/x86_64-w64-mingw32/include" \
                 LDFLAGS="-L/usr/x86_64-w64-mingw32/lib" \
                 ./Configure --cross-compile-prefix=x86_64-w64-mingw32- --prefix=/usr/x86_64-w64-mingw32 no-zlib no-shared no-dso no-krb5 no-camellia no-capieng no-cast no-cms no-dtls1 no-gost no-gmp no-heartbeats no-idea no-jpake no-md2 no-mdc2 no-rc5 no-rdrand no-rfc3779 no-rsax no-sctp no-seed no-sha0 no-static_engine no-whirlpool no-rc2 no-rc4 no-ssl2 no-ssl3 mingw64 && \
                 make depend
                 make -j4
                 make install
      - run:
          name: Build Pink2d Daemon
          command: |          
                 export PATH=/usr/bin:$PATH          
                 cd src 
                 make -f makefile.linux-mingw DEPSDIR=/usr/x86_64-w64-mingw32 TARGET_PLATFORM=x86_64
                 strip pink2d.exe
#      - run:
#         name: Build Pinkcoin-Qt
#          command: |
#                 MXE_INCLUDE_PATH /opt/mxe/usr/x86_64-w64-mingw32/include
#                 MXE_LIB_PATH /opt/mxe/usr/x86_64-w64-mingw32/lib
#                 x86_64-w64-mingw32-qmake-qt5 pinkcoin-qt.pro \
#                 USE_UPNP=1 \
#                 CONFIG+=c++11 \
#                 USE_QRCODE=1 \
#                 STATIC=all \
#                 RELEASE=1 \
#                 QRENCODE_INCLUDE_PATH=$MXE_INCLUDE_PATH \
#                 QRENCODE_LIB_PATH=$MXE_LIB_PATH  \
#                 BOOST_LIB_SUFFIX=-mt \
#                 BOOST_THREAD_LIB_SUFFIX=_win32-mt \
#                 BOOST_INCLUDE_PATH=$MXE_INCLUDE_PATH/boost \
#                 BOOST_LIB_PATH=$MXE_LIB_PATH \
#                 OPENSSL_INCLUDE_PATH=$MXE_INCLUDE_PATH/openssl \
#                 OPENSSL_LIB_PATH=$MXE_LIB_PATH \
#                 BDB_INCLUDE_PATH=$MXE_INCLUDE_PATH \
#                 BDB_LIB_PATH=$MXE_LIB_PATH \
#                 MINIUPNPC_INCLUDE_PATH=$MXE_INCLUDE_PATH \
#                 MINIUPNPC_LIB_PATH=$MXE_LIB_PATH \
#                 QMAKE_LRELEASE=/usr/x86_64-w64-mingw32/qt5/bin/lrelease
#                 make -f Makefile.Release
      - run:
          name: Set Artifact name as env
          command: |
                  echo 'export BUILD_DATE=$(date "+%Y%m%d%H%M")' >> $BASH_ENV
                  echo 'export BUILD_NAME=Pinkcoin-CIbuild-$CIRCLE_BUILD_NUM-$BUILD_DATE' >> $BASH_ENV
      - run:
          name: Tar artifacts
          command: |
                  mkdir /tmp/build/
                  cp src/pink2d.exe /tmp/build
                  tar cvfz /tmp/build/$BUILD_NAME.tar.gz .
      - store_artifacts:
          path: /tmp/build/
          destination: windows
